/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dkvs_H
#define dkvs_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "store_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class dkvsIf {
 public:
  virtual ~dkvsIf() {}
  virtual void get(meta& _return, const int16_t key, const std::string& consistency) = 0;
  virtual void put(meta& _return, const int16_t key, const std::string& value, const std::string& consistency, const int32_t timestamp, const bool is_coordinator) = 0;
  virtual void request_handoff(const node& n) = 0;
};

class dkvsIfFactory {
 public:
  typedef dkvsIf Handler;

  virtual ~dkvsIfFactory() {}

  virtual dkvsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(dkvsIf* /* handler */) = 0;
};

class dkvsIfSingletonFactory : virtual public dkvsIfFactory {
 public:
  dkvsIfSingletonFactory(const ::std::shared_ptr<dkvsIf>& iface) : iface_(iface) {}
  virtual ~dkvsIfSingletonFactory() {}

  virtual dkvsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(dkvsIf* /* handler */) {}

 protected:
  ::std::shared_ptr<dkvsIf> iface_;
};

class dkvsNull : virtual public dkvsIf {
 public:
  virtual ~dkvsNull() {}
  void get(meta& /* _return */, const int16_t /* key */, const std::string& /* consistency */) {
    return;
  }
  void put(meta& /* _return */, const int16_t /* key */, const std::string& /* value */, const std::string& /* consistency */, const int32_t /* timestamp */, const bool /* is_coordinator */) {
    return;
  }
  void request_handoff(const node& /* n */) {
    return;
  }
};

typedef struct _dkvs_get_args__isset {
  _dkvs_get_args__isset() : key(false), consistency(false) {}
  bool key :1;
  bool consistency :1;
} _dkvs_get_args__isset;

class dkvs_get_args {
 public:

  dkvs_get_args(const dkvs_get_args&);
  dkvs_get_args& operator=(const dkvs_get_args&);
  dkvs_get_args() : key(0), consistency() {
  }

  virtual ~dkvs_get_args() noexcept;
  int16_t key;
  std::string consistency;

  _dkvs_get_args__isset __isset;

  void __set_key(const int16_t val);

  void __set_consistency(const std::string& val);

  bool operator == (const dkvs_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(consistency == rhs.consistency))
      return false;
    return true;
  }
  bool operator != (const dkvs_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dkvs_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dkvs_get_pargs {
 public:


  virtual ~dkvs_get_pargs() noexcept;
  const int16_t* key;
  const std::string* consistency;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dkvs_get_result__isset {
  _dkvs_get_result__isset() : success(false) {}
  bool success :1;
} _dkvs_get_result__isset;

class dkvs_get_result {
 public:

  dkvs_get_result(const dkvs_get_result&);
  dkvs_get_result& operator=(const dkvs_get_result&);
  dkvs_get_result() {
  }

  virtual ~dkvs_get_result() noexcept;
  meta success;

  _dkvs_get_result__isset __isset;

  void __set_success(const meta& val);

  bool operator == (const dkvs_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dkvs_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dkvs_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dkvs_get_presult__isset {
  _dkvs_get_presult__isset() : success(false) {}
  bool success :1;
} _dkvs_get_presult__isset;

class dkvs_get_presult {
 public:


  virtual ~dkvs_get_presult() noexcept;
  meta* success;

  _dkvs_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _dkvs_put_args__isset {
  _dkvs_put_args__isset() : key(false), value(false), consistency(false), timestamp(false), is_coordinator(false) {}
  bool key :1;
  bool value :1;
  bool consistency :1;
  bool timestamp :1;
  bool is_coordinator :1;
} _dkvs_put_args__isset;

class dkvs_put_args {
 public:

  dkvs_put_args(const dkvs_put_args&);
  dkvs_put_args& operator=(const dkvs_put_args&);
  dkvs_put_args() : key(0), value(), consistency(), timestamp(0), is_coordinator(0) {
  }

  virtual ~dkvs_put_args() noexcept;
  int16_t key;
  std::string value;
  std::string consistency;
  int32_t timestamp;
  bool is_coordinator;

  _dkvs_put_args__isset __isset;

  void __set_key(const int16_t val);

  void __set_value(const std::string& val);

  void __set_consistency(const std::string& val);

  void __set_timestamp(const int32_t val);

  void __set_is_coordinator(const bool val);

  bool operator == (const dkvs_put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(consistency == rhs.consistency))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(is_coordinator == rhs.is_coordinator))
      return false;
    return true;
  }
  bool operator != (const dkvs_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dkvs_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dkvs_put_pargs {
 public:


  virtual ~dkvs_put_pargs() noexcept;
  const int16_t* key;
  const std::string* value;
  const std::string* consistency;
  const int32_t* timestamp;
  const bool* is_coordinator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dkvs_put_result__isset {
  _dkvs_put_result__isset() : success(false) {}
  bool success :1;
} _dkvs_put_result__isset;

class dkvs_put_result {
 public:

  dkvs_put_result(const dkvs_put_result&);
  dkvs_put_result& operator=(const dkvs_put_result&);
  dkvs_put_result() {
  }

  virtual ~dkvs_put_result() noexcept;
  meta success;

  _dkvs_put_result__isset __isset;

  void __set_success(const meta& val);

  bool operator == (const dkvs_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dkvs_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dkvs_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dkvs_put_presult__isset {
  _dkvs_put_presult__isset() : success(false) {}
  bool success :1;
} _dkvs_put_presult__isset;

class dkvs_put_presult {
 public:


  virtual ~dkvs_put_presult() noexcept;
  meta* success;

  _dkvs_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _dkvs_request_handoff_args__isset {
  _dkvs_request_handoff_args__isset() : n(false) {}
  bool n :1;
} _dkvs_request_handoff_args__isset;

class dkvs_request_handoff_args {
 public:

  dkvs_request_handoff_args(const dkvs_request_handoff_args&);
  dkvs_request_handoff_args& operator=(const dkvs_request_handoff_args&);
  dkvs_request_handoff_args() {
  }

  virtual ~dkvs_request_handoff_args() noexcept;
  node n;

  _dkvs_request_handoff_args__isset __isset;

  void __set_n(const node& val);

  bool operator == (const dkvs_request_handoff_args & rhs) const
  {
    if (!(n == rhs.n))
      return false;
    return true;
  }
  bool operator != (const dkvs_request_handoff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dkvs_request_handoff_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dkvs_request_handoff_pargs {
 public:


  virtual ~dkvs_request_handoff_pargs() noexcept;
  const node* n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dkvs_request_handoff_result {
 public:

  dkvs_request_handoff_result(const dkvs_request_handoff_result&);
  dkvs_request_handoff_result& operator=(const dkvs_request_handoff_result&);
  dkvs_request_handoff_result() {
  }

  virtual ~dkvs_request_handoff_result() noexcept;

  bool operator == (const dkvs_request_handoff_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const dkvs_request_handoff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dkvs_request_handoff_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dkvs_request_handoff_presult {
 public:


  virtual ~dkvs_request_handoff_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class dkvsClient : virtual public dkvsIf {
 public:
  dkvsClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  dkvsClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(meta& _return, const int16_t key, const std::string& consistency);
  void send_get(const int16_t key, const std::string& consistency);
  void recv_get(meta& _return);
  void put(meta& _return, const int16_t key, const std::string& value, const std::string& consistency, const int32_t timestamp, const bool is_coordinator);
  void send_put(const int16_t key, const std::string& value, const std::string& consistency, const int32_t timestamp, const bool is_coordinator);
  void recv_put(meta& _return);
  void request_handoff(const node& n);
  void send_request_handoff(const node& n);
  void recv_request_handoff();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class dkvsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<dkvsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (dkvsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_request_handoff(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  dkvsProcessor(::std::shared_ptr<dkvsIf> iface) :
    iface_(iface) {
    processMap_["get"] = &dkvsProcessor::process_get;
    processMap_["put"] = &dkvsProcessor::process_put;
    processMap_["request_handoff"] = &dkvsProcessor::process_request_handoff;
  }

  virtual ~dkvsProcessor() {}
};

class dkvsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  dkvsProcessorFactory(const ::std::shared_ptr< dkvsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< dkvsIfFactory > handlerFactory_;
};

class dkvsMultiface : virtual public dkvsIf {
 public:
  dkvsMultiface(std::vector<std::shared_ptr<dkvsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~dkvsMultiface() {}
 protected:
  std::vector<std::shared_ptr<dkvsIf> > ifaces_;
  dkvsMultiface() {}
  void add(::std::shared_ptr<dkvsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(meta& _return, const int16_t key, const std::string& consistency) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key, consistency);
    }
    ifaces_[i]->get(_return, key, consistency);
    return;
  }

  void put(meta& _return, const int16_t key, const std::string& value, const std::string& consistency, const int32_t timestamp, const bool is_coordinator) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(_return, key, value, consistency, timestamp, is_coordinator);
    }
    ifaces_[i]->put(_return, key, value, consistency, timestamp, is_coordinator);
    return;
  }

  void request_handoff(const node& n) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request_handoff(n);
    }
    ifaces_[i]->request_handoff(n);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class dkvsConcurrentClient : virtual public dkvsIf {
 public:
  dkvsConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  dkvsConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(meta& _return, const int16_t key, const std::string& consistency);
  int32_t send_get(const int16_t key, const std::string& consistency);
  void recv_get(meta& _return, const int32_t seqid);
  void put(meta& _return, const int16_t key, const std::string& value, const std::string& consistency, const int32_t timestamp, const bool is_coordinator);
  int32_t send_put(const int16_t key, const std::string& value, const std::string& consistency, const int32_t timestamp, const bool is_coordinator);
  void recv_put(meta& _return, const int32_t seqid);
  void request_handoff(const node& n);
  int32_t send_request_handoff(const node& n);
  void recv_request_handoff(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
